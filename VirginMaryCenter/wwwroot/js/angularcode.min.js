(function () {
    var app = angular.module('app', ['ngSanitize', 'ngStorage']);

    
    /*    $.connection.hub.url = OCRServiceSyncUrl;
        $.connection.hub.logging = true;
        $.connection.hub.start();
        */
    

  /*  $.connection.hub.error(function (err) {
        console.log('SignalR error occured: ' + err);
    });
   

    //this adds a service called chat that you can then use in the controller by passing it as a parameter
    angular.module('app')
        .value('OCRSync', $.connection.OCRsync);
 */
})();
angular.module('app').directive('ngEsc', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress keyup", function (event) {
            if (event.which === 27) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEsc);
                });

                event.preventDefault();
            }
        });
    };
});    
(function () {
    angular.module('app').factory('eventDateService', function () {


        function yyyymmdd(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('-');
        }

        var eventDates = [];

        var Refresh = function () {

        };

        return {
            eventDates: eventDates,
            yyyymmdd: yyyymmdd,
            Refresh: Refresh
        };

    });

})();

 
angular.module('app').directive("calendar", function (eventDateService) {

    return {
        restrict: "E",
        templateUrl: "templates/calendar.html",
        scope: {
            selected: "="
        },
        link: function (scope) {

            eventDateService.Refresh = function () {
                _buildMonth(scope, start, scope.month);
            };

            scope.selected = _removeTime(scope.selected || moment());
            scope.month = scope.selected.clone();

            var start = scope.selected.clone();
            start.date(1);
            _removeTime(start.day(0));

            _buildMonth(scope, start, scope.month);

            scope.select = function (day) {
                scope.selected = day.date;
            };

            scope.next = function () {
                var next = scope.month.clone();
                _removeTime(next.month(next.month() + 1).date(1));
                scope.month.month(scope.month.month() + 1);
                _buildMonth(scope, next, scope.month);
            };

            scope.previous = function () {
                var previous = scope.month.clone();
                _removeTime(previous.month(previous.month() - 1).date(1));
                scope.month.month(scope.month.month() - 1);
                _buildMonth(scope, previous, scope.month);
            };
        }
    };

    function _removeTime(date) {
        return date.day(0).hour(0).minute(0).second(0).millisecond(0);
    }

    function _buildMonth(scope, start, month) {
        scope.weeks = [];
        var done = false, date = start.clone(), monthIndex = date.month(), count = 0;
        while (!done) {
            scope.weeks.push({ days: _buildWeek(date.clone(), month) });
            date.add(1, "w");
            done = count++ > 2 && monthIndex !== date.month();
            monthIndex = date.month();
        }

        console.log(scope.weeks);

    }

    function _buildWeek(date, month) {
        var days = [];
        for (var i = 0; i < 7; i++) {
            days.push({
                name: date.format("dd").substring(0, 1),
                number: date.date(),
                isCurrentMonth: date.month() === month.month(),
                isToday: date.isSame(new Date(), "day"),
                eventName: eventDateService.eventDates[eventDateService.yyyymmdd(date)],
                date: date
            });
            date = date.clone();
            date.add(1, "d");
        }

        return days;
    }
});
angular.module('app').directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter);
                });
                event.preventDefault();
            }
        });
    };
});
angular.module('app').filter('titlecase', function () {
    return function (input) {
        if (!input)
            return "";

        var smallWords = /^(a|an|and|as|at|de|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;

        input = input.toLowerCase();
        return input.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function (match, index, title) {
            if (index > 0 && index + match.length !== title.length &&
                match.search(smallWords) > -1 && title.charAt(index - 2) !== ":" &&
                (title.charAt(index + match.length) !== '-' || title.charAt(index - 1) === '-') &&
                title.charAt(index - 1).search(/[^\s-]/) < 0) {
                return match.toLowerCase();
            }

            if (match.substr(1).search(/[A-Z]|\../) > -1) {
                return match;
            }

            return match.charAt(0).toUpperCase() + match.substr(1);
        });
    }
});
angular.module('app').controller('calendarCtrl', ['$scope', 'eventDateService', function ($scope, eventDateService) {
    $scope.day = moment();

    $scope.getEventTitle = function (dt) {
        return eventDateService.eventDates[eventDateService.yyyymmdd(dt)];
    };
}]);
angular.module('app').controller('changeLocationCtrl', ['$scope', '$localStorage','$http', function ($scope, $localStorage, $http) {
    $scope.ChangeLocation = function () {
        $scope.ZipCodeList = null;

        $http({
            method: 'GET',
            url: "api/prayertimes/validateLocation",
            params: {
                ZipOrCityState: $scope.inputLocation
            }
        }).then(function successCallback(response) {
            console.log(response.data);
            if (!response.data.length && response.data.zipCode) {
                $localStorage.location = response.data;
                $('#userLocation').modal('hide');
            }
            else if (response.data.length === 1) {
                $localStorage.location = response.data;
                $('#userLocation').modal('hide');
            }
            else {
                $scope.ZipCodeList = response.data;
            }


            //$('#userLocation').modal('hide');

        }, function errorCallback(response) {
            if (response.data.errorMsg)
                $scope.AddressErrorMsg = response.data.errorMsg;
            else
                $scope.AddressErrorMsg = 'Unknown error occured. Try again later.';

            console.log(response);
        });
    };


    if (!$localStorage.location) {
        $scope.inputLocation = '94587';
        console.log("changing to default location");
        $scope.ChangeLocation();
        console.log($localStorage.location);

    }
    
    $scope.AddressErrorMsg = "";
    $scope.ZipCodeList = null;

    $scope.zipClick = function (ziparray) {
        $localStorage.location = ziparray;
        $('#userLocation').modal('hide');
    };

  

    $scope.getEventTitle = function (dt) {
        return eventDateService.eventDates[eventDateService.yyyymmdd(dt)];
    };
}]);
angular.module('app').controller('eventCtrl', ['$scope', '$window', '$http', '$sce', 'eventDateService', function ($scope, $window, $http, $sce, eventDateService) {
    $scope.loading = true;
    $scope.tmp = "";
    $scope.tmpjson = "";

    $scope.tmp = new Date();

    var getNextSaturday = function () {
        var dt = new Date();

        while (dt.getDay() !== 6) {
            dt.setDate(dt.getDate() + 1);
        }

        return dt;
    };

    $scope.eventPeriods =
        {
            "live": {
                name: "LIVE EVENTS",
                show: false,
                data: null,
                limitTo: 3
            },
            "upcoming": {
                name: "UPCOMING EVENTS",
                show: true,
                data: [],
                limitTo: 3
            },
            "past": {
                name: "PAST EVENTS",
                show: false,
                data: null,
                limitTo: 3
            }
        };

    $scope.getEventBackground = function (d) {
        return new Date(d).getHours() > 16 ? "night" : "day";
    };

    $scope.getEventBackgroundIcon = function (d) {
        return new Date(d).getHours() > 16 ? "fa-moon" : "fa-sun";
    };

    $scope.filterDesc = function (desc) {
        //desc = desc.replace("In the name of Allah, the Compassionate the Merciful", "");
        //desc = desc.replace("In the name of Allah, the Compassionate, the Merciful", "");
        //desc = desc.replace("Assalamu Aleykum", "");
        //desc = desc.trim();
        return desc;
    };

    $scope.getGoogleMapDirection = function (address, city, state) {
        return "https://www.google.com/maps/dir/?api=1&origin=" + encodeURI(address + " " + city + ", " + state);
    };

    var formatAMPM = function (date) {
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ' ' + ampm;
        return strTime;
    };

    $scope.sameDate = function (sT, eT) {
        var startTime = new Date(sT);
        var endTime = new Date(eT);

        if (startTime.getDate() === endTime.getDate()) {
            return true;
        }
        else
            return false;
    };
    

    $scope.eventView = function () {
        $scope.loading = true;

        $http({
            method: 'GET',
            url: "/api/events",
            params: {
            }
        }).then(function successCallback(response) {

            var eventsAll = JSON.parse(response.data).data;

            eventDateService.eventDates = [];
            for (var x = 0; x < eventsAll.length; x++) {
                //console.log(eventsAll[x].start_time);
                eventDateService.eventDates[eventDateService.yyyymmdd(eventsAll[x].start_time)] = eventsAll[x].name;
            }

            $scope.eventPeriods["live"].data = eventsAll.filter(e => (new Date(e.start_time).getTime() <= new Date().getTime() && new Date(e.end_time).getTime() >= new Date().getTime()));
            $scope.eventPeriods["live"].show = $scope.eventPeriods["live"].data.length > 0 ? true : false;

            var upcomingFilter = (eventsAll.filter(e => new Date(e.start_time).getTime() >= new Date().getTime()))
            if (upcomingFilter && upcomingFilter.length > 0) {
                $scope.eventPeriods["upcoming"].data = upcomingFilter;
            }
            else if (!$scope.eventPeriods["live"].data || $scope.eventPeriods["live"].data.length == 0) {
             
                $scope.eventPeriods["upcoming"].data = [{
                    default: true,

                    cover: {
                        source: "/images/background-blur-5.jpg"
                    },
                    is_draft: false,
                    name: "Event details TBD",
                    description: "We will make an announcement soon. Please check back later",
                    start_time: getNextSaturday(),
                    end_time: getNextSaturday()
                }];

                $scope.eventPeriods["upcoming"].show = true;
            }
            else {
                $scope.eventPeriods["upcoming"].data = null;
                $scope.eventPeriods["upcoming"].show = false;
            }
            console.log(new Date())
            $scope.eventPeriods["past"].data = eventsAll.filter(e => new Date(e.end_time).getTime() <= new Date().getTime());
            $scope.eventPeriods["past"].show = $scope.eventPeriods["past"].data.length > 0 ? true : false;

            console.log($scope.eventPeriods);
            $scope.loading = false;

            eventDateService.Refresh();


        }, function errorCallback(response) {
            $scope.hasError = true;
        });
    };


    $scope.eventView();

}]);
angular.module('app').controller('prayertimeCtrl', ['$scope', '$localStorage', '$http', function ($scope, $localStorage, $http) {
    $scope.day = moment();
 
    $scope.prayerTimes = [];

    $scope.location = $localStorage.location;


    $scope.$watch(function () {
        return $localStorage.location;
    }, function (newCodes, oldCodes) {
            if (newCodes) {
                $scope.getPrayerTimes(newCodes);
                $scope.location = $localStorage.location;
            }

    });

    $scope.getPrayerTimes = function (locationInfo) {
        $http({
            method: 'GET',
            url: "api/prayertimes",
            params: {
                zipcode: locationInfo.zipCode,
                longitude: locationInfo.longitude,
                latitude: locationInfo.latitude,
                GMT: locationInfo.GMT,
                hasDayLightSavings: locationInfo.daylight
            }
        }).then(function successCallback(response) {
            console.log(response.data);
            $scope.prayerTimes = response.data;

        }, function errorCallback(response) {
                $scope.prayerTimesHasError = true;
                console.log(response);
        });
    };
    
}]);